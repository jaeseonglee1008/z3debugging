(assert (= a1 (+ x y)))
(assert (= a2 (+ a1 z)))
(assert (= mutated_a2 (- a1 z)))
(assert (= a2 mutated_a2))
when we tested a2 = mutated_a2 from the 4th line of code above, we received return value with 'sat'.
This tells us the Mutant and Sum methods could have same input for same output but this doesnt mean that
the Mutant and Sum methods are identical. so we changed 4th line of code like (assert (not (= a2 mutated_a2))).

-----------Our code and result below--------------

;;;;;;;;;;;;;;;;; START STUDENT CODE ;;;;;;;;;;;;;;;

(assert (= a1 (+ x y)))
(assert (= a2 (+ a1 z)))
(assert (= mutated_a2 (- a1 z)))
(assert (not (= a2 mutated_a2)))

;;;;;;;;;;;;;;;;; END STUDENT CODE ;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;; RESULT STARTS HERE ;;;;;;;;;;;;;;;;;;;;;;;;;;
sat
-------------------------------- Getting model ---------------------------------
(model
  (define-fun z () Int
    1)
  (define-fun x () Int
    0)
  (define-fun y () Int
    0)
  (define-fun mutated_a2 () Int
    1)
  (define-fun a2 () Int
    (- 1))
  (define-fun a1 () Int
    0)
)
;;;;;;;;;;;;;;;;;;;; RESULT ENDS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Z3 program returned 'sat' with values 0, 0 and 1 on x, y and z on our test
which means there exists certain input values that returns different return values from each methods.
