(assert (= a1 (+ x y)))
(assert (= a2 (+ a1 z)))
(assert (= mutated_a2 (- a1 z)))
(assert (= a2 mutated_a2))
In the fourth line of the above code, when we tested a2 = mutated_a2, we received a return value with 'sat'.
This indicates that the Mutant and Sum methods can have the same input for the same output,
but this does not mean that the Mutant and Sum methods are identical.
So we need to change the fourth line of code (such as assert (not (= a2 mutated_a2))).

-----------Our code and result below--------------

;;;;;;;;;;;;;;;;; START STUDENT CODE ;;;;;;;;;;;;;;;

(assert (= a1 (+ x y)))
(assert (= a2 (+ a1 z)))
(assert (= mutated_a2 (- a1 z)))
(assert (not (= a2 mutated_a2)))

;;;;;;;;;;;;;;;;; END STUDENT CODE ;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;; RESULT STARTS HERE ;;;;;;;;;;;;;;;;;;;;;;;;;;
sat
-------------------------------- Getting model ---------------------------------
(model
  (define-fun z () Int
    1)
  (define-fun x () Int
    0)
  (define-fun y () Int
    0)
  (define-fun mutated_a2 () Int
    1)
  (define-fun a2 () Int
    (- 1))
  (define-fun a1 () Int
    0)
)
;;;;;;;;;;;;;;;;;;;; RESULT ENDS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

The Z3 interpreter returned 'sat' for the values 0, 0, and 1 in x, y, and z in the test.
This means that each method has a specific input value that returns a different return value.
